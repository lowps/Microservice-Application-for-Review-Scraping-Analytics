# #upstream block- defines a group of servers that can handle requests.
# #often used for load balancing, allowing nginx to distribute incoming requests
# #across multiple Django application servers
# upstream django {
#     server django_gunicorn:8000;
# }

# server {
#     listen 80;

#     location / {
#         proxy_pass http://django;
#     }

#     location /static/ {
#         alias /static/;
#     }
# }

#-----
#server block- Setting up server block here, specifically using "server" as
#top level element is typically for setting up proxy servers

#simple server that listens on port 80 and maps requests to local host server
#"root" directive is placed within server context but specifically within location context
#You can place "root" directive within server block and outside of location block but thats only valid
# if location block did not have a root directive within it and vice versa. 
#"root" directive is used to MAP all requests to a specified directory on the local file system and that directory
#consists of static content
#simple directives- These are defined below and syntax follow: name, parameter, semicolon 
#to declare ending of simple directive.


#NGINX below is acting as a REVERSE PROXY because nginx is standing in front of
#the application server (gunicorn) thus providing extra layer of security, the "face" of our backend (masking our back end/hiding it)
# its handling incoming HTTP requests and forwarding them to the appropriate back end service

#NGINX is listening on port 80
#"proxy_pass" forwards requests to port 8000 where Gunicorn is listening
#Requests for /static/ (prefix) are served directly by NGINX from static/ directory
#Requests to "/" (all other paths) are proxied to specified socket, in this case where Gunicorn is listening

#I think Im gonna need to use upstream { server web:8000;} block and in proxy_pass do 
#"proxy_pass http://django_app;" look further into this ..
#ok ONLINE said, not mandatory, but recommended for cleaner and scalable configurations, 
#particularly when multiple backend servers are used. Makes it easier to manage multiple backend serviers
#or switch targets. basically use when dealing with multiple back end servers, Load balancing set up, 
#Essentially, upstream block allows you to define multipel backend servers inside its context, thus centralized backend definitions
#With all that said, my current setup configuration is FUNCTIONAL.


upstream django_gunicorn {
    server django_gunicorn:8000; #'django_gunicorn' name of service in docker-compose file and its associated port application is associated with
}
server {
    listen 80;
    listen [::]:80;
    #"server_name" directive in NGINX defines which hostname or domain name NGINX will respond to for a particular server block. 
    #EX: if you access "http://localhost" in your browser, NGINX will handle the request.
    server_name localhost;
    
    #TO DO: get rid of carrot and see how functionality changes of http://127.0.0.1:8000
    location /static/ { 
        alias /app/static/; #path of static folder inside Docker Container
        expires 30d; #Optional; Cache static files for 30 days
        access_log /var/log/nginx/static_access.log;
        error_log /var/log/nginx/error.log;
        try_files $uri $uri/ =404; 
        # root static/;
        #alias /Users/ericklopez/Desktop/django_gun/empirical/i_app/static/; #"alias" maps the "/static/" URL path to the actual file path below
    }
    #"proxy_pass"- All incoming Traffic NGINX receives on port 80 is FORWARDED to port 8000 where 'django_gunicorn' is listening on 
    #also referring to upstream 'django_gunicorn'
    location / {
        proxy_pass http://django_gunicorn; #Use when running Django app & Nginx in seperate Docker containers; NGINX is listening on port 80 and any REQUESTS it receives there... "proxy_pass" allows you to specify the service you want to Forward all traffic to thus in this case its "django_gunicorn" or port 8000 where its listening on  
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off; 
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        alias /usr/share/nginx/html;
    }
}



#Dont be a fucking idiot and forget this:
#django_gunicorn.localhost:8000/admin